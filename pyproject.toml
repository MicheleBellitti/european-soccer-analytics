[tool.poetry]
name = "european-soccer-analytics"
version = "0.1.0"
description = "A comprehensive European Soccer analytics platform with data fetching, storage, and interactive dashboard"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "soccer_analytics", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
streamlit = "^1.28.0"
sqlalchemy = "^2.0.0"
psycopg2-binary = "^2.9.7"
pandas = "^2.1.0"
plotly = "^5.17.0"
requests = "^2.31.0"
python-dotenv = "^1.0.0"
typer = "^0.9.0"
rich = "^13.6.0"
alembic = "^1.12.0"
pydantic = "^2.4.0"
httpx = "^0.25.0"
pydantic-settings = "^2.10.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.9.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.6.0"
pre-commit = "^3.4.0"
pytest-mock = "^3.11.0"
factory-boy = "^3.3.0"
responses = "^0.23.3"

[tool.poetry.scripts]
soccer-analytics = "soccer_analytics.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["soccer_analytics"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=soccer_analytics --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/soccer_analytics"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]